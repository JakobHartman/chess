{
  "name": "chessground",
  "version": "2.9.2",
  "description": "lichess.org Chess UI",
  "main": "src/main.js",
  "directories": {
    "example": "examples"
  },
  "dependencies": {
    "merge": "1.2.0",
    "mithril": "0.2.0"
  },
  "devDependencies": {
    "browserify": "~9.0.8",
    "gulp": "~3.9.0",
    "gulp-jshint": "~1.11.0",
    "gulp-streamify": "~0.0.5",
    "gulp-uglify": "~1.2.0",
    "gulp-util": "~3.0.4",
    "vinyl-source-stream": "~1.1.0",
    "watchify": "~3.1.1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/ornicar/chessground.git"
  },
  "keywords": [
    "chess",
    "lichess.org",
    "chessboard",
    "UI"
  ],
  "author": {
    "name": "Thibault Duplessis",
    "url": "https://github.com/ornicar"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/ornicar/chessground/issues"
  },
  "homepage": "https://github.com/ornicar/chessground",
  "readme": "<img src=\"https://raw.githubusercontent.com/ornicar/chessground/master/screenshot/3d.png\" width=512 height=512 alt=\"Chessground in 3D mode\" />\n\n**Chessground** is the opensource chess UI developed for [lichess.org](http://lichess.org).\n\nIt targets modern browsers, as well as mobile development using Cordova.\n\n### Demos\n\n- [Chess TV](http://lichess.org/tv)\n- [Board editor](http://lichess.org/editor)\n- [Puzzle solver](http://lichess.org/training)\n- [Analysis board](http://lichess.org/ofWXRFGy)\n- [Game preview](http://lichess.org/games)\n- [Chess Captcha](http://lichess.org/signup)\n\n## Features\n\nChessground is designed to fulfill all lichess.org web and mobile apps needs, so it is pretty featureful.\n\n- Fast. Uses virtual DOM; runs smoothly even on elder mobile phones\n- Small footprint: 12K gzipped (35K unzipped) including dependencies\n- Standalone, or composable as a mithril.js module\n- Entirely configurable and reconfigurable at any time\n- Styling with CSS: board and pieces can be changed by simply switching a class\n- Fluid layout: board can be resized at any time\n- Support for 3D pieces and boards\n- Full mobile support (touchstart, touchmove, touchend)\n- Move pieces by click\n- Move pieces by drag'n drop\n  - minimum distance before drag\n  - centralisation of the piece under the cursor\n  - square target element for mobile\n  - piece ghost\n  - drop off revert or trash\n- Premove by click or drag\n- Animation of pieces: moving and fading away\n- Display last move, check, move destinations, and premove destinations\n- SVG drawing of circles and arrows on the board\n- Import and export positions in FEN notation\n- User callbacks\n- No chess logic inside: can be used for chess variations\n\n### Dependencies\n\n- [mithril.js](https://github.com/lhorie/mithril.js) - a minimalist virtual DOM library\n\n## Installation\n\n```\nnpm install --save chessground\n```\n\n### Usage\n\n```js\nvar Chessground = require(\"chessground\");\n\nvar ground = Chessground(document.body, options);\n```\n\n## Options\n\nAll options are, well, optional.\n\n```js\n{\n  orientation: \"white\",   // board orientation (or view angle) \"white\" | \"black\"\n  turnColor: \"white\",     // turn to play. \"white\" | \"black\"\n  check: null,            // square currently in check \"a2\" | null\n  lastMove: null,         // squares part of the last move [\"c3\", \"c4\"] | null\n  selected: null,         // square currently selected \"a1\" | null\n  coordinates: true,      // display board coordinates as square ::after elements\n  viewOnly: false,        // don't bind events: the user will never be able to move pieces around\n  minimalDom: false,      // don't use square elements. Optimization to use only with viewOnly\n  disableContextMenu: false\n  highlight: {\n    lastMove: true,       // add last-move class to squares\n    check: true,          // add check class to squares\n    dragOver: true        // add drag-over class to square when dragging over it\n  },\n  animation: {\n    enabled: true,        // enable piece animations, moving and fading\n    duration: 200,        // animation duration in milliseconds\n  },\n  movable: {\n    free: true,           // all moves are valid - board editor\n    color: \"both\",        // color that can move. \"white\" | \"black\" | \"both\" | null\n    dests: {},            // valid moves. {a2: [\"a3\", \"a4\"], b1: [\"a3\", \"c3\"]} | null\n    dropOff: \"revert\",    // when a piece is dropped outside the board. \"revert\" | \"trash\"\n    showDests: true,      // add the move-dest class to squares\n    events: {\n                          // called after the move has been played\n      after: function(orig, dest, metadata) {}\n    }\n  },\n  premovable: {\n    enabled: true,        // allow premoves for color that can not move\n    showDests: true,      // add the premove-dest class to squares\n    current: null         // keys of the current saved premove [\"e2\", \"e4\"] | null\n      events: {\n                          // called after the premove has been set\n        set: function(orig, dest) {},\n                          // called after the premove has been unset\n        unset: function() {}\n      }\n  },\n  draggable: {\n    enabled: true,        // allow moves & premoves to use drag'n drop\n    distance: 3,          // minimum distance to initiate a drag, in pixels\n    squareTarget: false,  // display big square target; intended for mobile\n    centerPiece: true,    // center the piece on cursor at drag start\n    showGhost: true,      // show ghost of piece being dragged\n  },\n  drawable: {\n    enabled: true         // enable SVG circle and arrow drawing on the board\n  },\n  events: {\n    change: function() {},   // called after the situation changes on the board\n    // called after a piece has been moved.\n    // capturedPiece is null or like {color: 'white', 'role': 'queen'}\n    move: function(orig, dest, capturedPiece) {},\n    select: function(key) {} // called when a square is selected\n  }\n}\n```\n\n## A.P.I.\n\nThere are a few functions you can call on a Chessground instance:\n\n### Setters\n\n```js\n// reconfigure the instance. Accepts all options mentioned above (bar \"viewOnly\" & \"minimalDom\").\n// board will be animated accordingly, if animations are enabled.\nground.set(options);\n\n// sets the king of this color in check\n// if no color is provided, the current turn color is used\nground.setCheck(color);\n\n// change the view angle\nground.toggleOrientation();\n\n// perform a move programmatically\nground.move(\"e2\", \"e4\");\n\n// add and/or remove arbitrary pieces on the board\nground.setPieces({a1: null, c5: {color: \"black\", role: \"queen\"}});\n\n// play the current premove, if any\nground.playPremove();\n\n// cancel the current premove, if any\nground.cancelPremove();\n\n// cancel the current move being made\nground.cancelMove();\n\n// cancels current move and prevent further ones\nground.stop();\n```\n\n### Getters\n\n```js\n// get the view angle\nvar orientation = ground.getOrientation();\n\n// get pieces on the board\n// {a1: {color: \"white\", role: \"rook\"}, b1: {color: \"white\", role: \"knight\"}}\nvar pieces = ground.getPieces();\n\n// get the material difference between white and black\n// {white: {pawn: 3 queen: 1}, black: {bishop: 2}}\nvar diff = ground.getMaterialDiff();\n\n// get the current FEN position\n// rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR\nvar fen = ground.getFen();\n```\n\n## Developers\n\n### Build\n\n```\nnpm install\ngulp\n```\n\nThen open `examples/index.html` in your browser.\nThe examples are non exhaustive, but feel free to try things out by editing `index.html`.\n",
  "readmeFilename": "README.md",
  "_id": "chessground@2.9.2",
  "_shasum": "93eafe151249ba226b9572cc177632b920e59602",
  "_resolved": "git://github.com/ornicar/chessground.git#d0922826cf394be920beb7d5af458cbbdab0a3a9",
  "_from": "chessground@git://github.com/ornicar/chessground.git"
}
